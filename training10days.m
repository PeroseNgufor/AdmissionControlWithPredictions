function rmse2 = newObjective(x)
%visualizedata = input

visualizedata = [1,34.1335674559368;2,18.3900626836555;3,82.6213018329283;4,43.9641806658186;5,49.1364632763101;6,95.5049520889047;7,48.4388703568190;8,79.1086508465161;9,133.270269890165;10,95.1133470885030;11,118.782009135216;12,86.7770990559825;13,68.1545516855375;14,111.616317495201;15,42.5684282119470;16,91.2381246934503;17,63.1508977381605;18,58.0689939378792;19,73.9664762952520;20,130.354187137019;21,96.8609531675251;22,140.408748293483;23,69.9593421912928;24,63.6574388101289;25,49.1474136555534;26,53.6845957072071;27,27.1618537977779;28,50.8768028313455;29,29.9127274020430;30,113.418077042235;31,83.3524645725507;32,68.5127712790825;33,72.8353175175568;34,67.5815665839716;35,27.9221713980819;36,51.5131711638943;37,45.8021320211444;38,31.5872487404583;39,32.7448499705998;40,48.5655017172334;41,85.5107756474250;42,54.5543039755748;43,29.0317398172330;44,41.5286457198068;45,54.5348572738777;46,44.9665810249088;47,95.1151931688722;48,33.8840566934953;49,43.5006508473709;50,66.0377341417259;51,32.8816243965832;52,21.7501822281229;53,48.4488112240650;54,58.6417817405485;55,104.225347097634;56,116.007186291813;57,85.5552114704396;58,73.6746481772946;59,70.1747386207731;60,62.5756341801753;61,47.1581421956442;62,68.1226113797595;63,130.420132572756;64,100.732955987351;65,92.7764805310125;66,80.4476581558889;67,154.929969166601;68,174.217729982819;69,76.0827840730990;70,48.3820449177732;71,142.622721814160;72,89.1209390327945;73,37.6769256768141;74,59.6827482378533;75,106.331450439089;76,62.0927605585212;77,230.891394160688;78,116.707795983245;79,34.5539602258269;80,30.5827620957723;81,64.1879830645195;82,115.689827459617;83,95.8519544357359;84,109.402255963157;85,58.6805590578034;86,73.0684764051801;87,87.0734845616478;88,55.2173295661082;89,75.1321170030508;90,18.8928967621911;91,41.6901393885512;92,35.2781108505474;93,56.9052931248415;94,28.1265500754541;95,39.1996177028715;96,38.1780612235677;97,42.7388612035452;98,92.0286096709080;99,73.8054415255696;100,39.6296164899216;101,25.3703003843227;102,58.0404315641856;103,65.4483323605362;104,114.439115300534;105,108.594042865661;106,211.130671873366;107,246.391706017512;108,255.256501953373;109,114.916950279670;110,55.6773849013455;111,96.7105921103725;112,25.1904856716405;113,115.454328837066;114,67.3870895853718;115,98.1174921056519;116,139.132100274514;117,58.2511898526869;118,141.694461372886;119,39.6030564796503;120,52.8889197909336;121,41.3821769445377;122,37.4697559532890;123,55.1071365307963;124,43.6715974962704;125,41.8726230426383;126,109.875863232036;127,70.1400016616099;128,62.7204439105891;129,74.1264078541142;130,60.1864543862995;131,56.1341226282264;132,68.4393123567664;133,56.9798588965583;134,82.7454015041439;135,61.5809690867641;136,40.5149120741978;137,120.265805556972;138,43.5779649816907;139,98.3272248321754;140,136.172780123632;141,110.962110403023;142,100.561517172518;143,188.068550202609;144,147.904788454320;145,137.618117429507;146,78.4767154426725;147,53.4249962653164;148,48.3707827262833;149,116.169305201955;150,63.2707457350424;151,86.3736986736179;152,94.7749253372913;153,129.925281318916;154,162.405988770413;155,81.8859914005753;156,105.547145674189;157,117.403386327550;158,65.5526762744753;159,113.403007148261;160,33.7974809126669;161,83.7117719444448;162,61.1469665076419;163,132.629669536687;164,62.2585169120895;165,22.8219937625750;166,100.805940393840;167,13.8815309355639;168,85.2774262628318;169,50.0036336191948;170,196.418409969064;171,94.5868936987579;172,65.0069037424554;173,55.0754871028868;174,47.3980957877687;175,108.748126160673;176,86.1912384068028;177,89.6950396652597;178,112.437488733284;179,19.6999511749318;180,46.7172258370858;181,48.5744444109461;182,37.8705378938370;183,56.0230451267884;184,66.9791100244174;185,59.0148487682506;186,151.231947586863;187,249.079059262905;188,97.1698396934387;189,171.913756556153;190,113.956657189346;191,228.134846150384;192,231.998554051078;193,185.587824757671;194,156.177669779617;195,83.1412649172736;196,105.317288093977;197,50.9838672528622;198,79.3646186767077;199,38.5341935222588;200,185.236063877110;201,73.2100092549547;202,55.2505766765930;203,94.4001105551115;204,124.212738993138;205,256.999893761287;206,99.6169635905455;207,44.9169636222001;208,40.6102426853102;209,51.9497508353875;210,82.8715362503386;211,72.4856693756535;212,86.8067459913275;213,83.7849403493737;214,70.4109146134169;215,108.456850145529;216,75.5227719908182;217,68.6381213779046;218,35.5562752099013;219,25.8750000378747;220,35.7524366043966;221,40.5474243835027;222,42.1136550245498;223,80.3677851071780;224,20.5664048257497;225,141.198103825722;226,42.3040007375693;227,26.4033126130225;228,154.845816128298;229,137.636914490398;230,81.6318062313127;231,39.6323260676032;232,32.5354732253157;233,38.6745692232196;234,41.4888479648178;235,23.5137418038423;236,78.0711051945755;237,41.6262516158602;238,57.5667919516595;239,19.4070790692937;240,23.9256599049246];
%edit the rest of the code to for 20 minute bursts
% of incoming flows


% INITIALIZING VARIABLES    
k = 23;                  % number of future steps to predict
M = 24;                  % length of a season in terms of data points is 12 (season = 1 year)

S = size(visualizedata);
s1 = S(1)-k;
s2 = S(2);
A = visualizedata(1:s1,s2);
controlset = visualizedata(1:S(1),s2);
control_set = controlset.';

Nseasons = floor(length(A)/M);

alpha = x(1);
beta = x(2);
gamma = x(3);

levels = zeros(s1,1);
levels(1) = A(1);

trend = zeros(s1,1);

seasons = zeros(s1,1);

% -------------- CALCULATING INITIAL VALUES --------------------------------

% Calculation of initial trend for time series with additive seasonality
initialtrend = zeros(M,1);
for i = 1:M
    initialtrend(i) = (A(i+M)-A(i))/M;  
end

trend1 = sum(initialtrend)/M; 
trend(1) = trend1;                      % Assign the initial trend to the first entry in the trend array


% Calculation of season averages
Sav = zeros(1, Nseasons);
for i = 1:Nseasons
    av = zeros(1, M);
    for j = 1:M
        av(j) = A((i-1)*M + j);
    end
    sumav = sum(av)/M;
    Sav(i) = sumav;                     % length of the Sav (season average) array should be Nseasons
end

% Calculation of initial season
initialseason = zeros(1, M);
tosum = zeros(1, Nseasons);
for j = 1:M
    for s = 1:Nseasons
        sumnew = A((s-1)*M + j) - Sav(s);
        tosum(s) = sumnew;
    end
    initialseason(j) = sum(tosum)/Nseasons;   
end
seasons(1:M) = initialseason;
% ---------------------------------------------------------------------------------------

% HoltWinters Exponential Smoothing implementation

forecasts = [];                  % array of forecasts should be k points longer than the data to be forecasted

%forecasts(1) = A(1);
for i = 2:s1
                % A) Calculate and update levels (exponential smoothing)
    if i-1>=M                               % if the previous observation is beyond the first season (M observations)
        levels(i) = levelupdatehw(alpha,A(i),seasons(i-M),levels(i-1),trend(i-1));                  % update the levels
    else                                    % if the previous observation is within the first season (within the first M observations)
        levels(i) = levelupdatehw(alpha,A(i),0,levels(i-1),trend(i-1));                  % previous season = 0 / non-existent
    end
                % B) Update the trend smoothing)
    levelstep = levels(i) - levels(i-1);
    trend(i) = trendupdate(beta,levelstep,trend(i-1));        % update the trends
    
    if i-M>0                                % if beyond season 1, since Season 1 was already initialized above
        seasons(i) = seasonupdate(gamma,A(i),levels(i),seasons(i-M));
    end

                % C) Update the forecast

    for f = 1:k
        if i+f-1>=M                              % if the future forecasts are beyond season 1
            forecasts(i+f) = (levels(i) + f*trend(i)) + seasons(i+f-M);      % additive seasonality HoltWinters Exponential Smoothing applied
    %else
    %    forecasts(i) = levels(i) + k*trend(i);
        end 
    end
end

[rmse2, nrmse2] = calculate_rmse(control_set, forecasts, M);
rmse2;
nrmse2;
end


